import os
import struct
from Crypto.Cipher import AES

key = bytes.fromhex("8D02E65E508308DD743F0DD4D31E484D")

def decrypt_chunk(cipher, chunk_len, ciphertext):
    decrypted = cipher.decrypt(ciphertext)
    return decrypted[:chunk_len] # Remove padding beyond original chunk length

def decrypt_file(input_file, key):
    with open(input_file, 'rb') as f_in:
        output_file = f"{input_file}.decrypted"
        with open(output_file, 'wb') as f_out:
            while True:
                iv = f_in.read(16) # Get the IV directly from the file
                if len(iv) < 16:
                    break
                
                length_bytes = f_in.read(4) # Read original chunk length (before padding)
                if len(length_bytes) < 4:
                    break
                
                chunk_len = struct.unpack("<I", length_bytes)[0]
                
                # Calculate the padded size of the encrypted chunk
                padded_len = ((chunk_len + 15) // 16) * 16
                
                ciphertext = f_in.read(padded_len)
                if len(ciphertext) < padded_len:
                    break
                
                cipher = AES.new(key, AES.MODE_CBC, iv)
                decrypted_data = decrypt_chunk(cipher, chunk_len, ciphertext)
                
                f_out.write(decrypted_data)
    
        print(f"Decryption completed for {input_file}.")
    return output_file

def process_files_in_directory(directory, key):
    # Loop through all the files in the directory
    for filename in os.listdir(directory):
        file_path = os.path.join(directory, filename)
        
        # Ignore any folders and the decryption script
        if os.path.isdir(file_path) or filename == "decryptScript.py":
            continue
        
        # Decrypt only the files present
        if os.path.isfile(file_path):
            decrypted_file_path = decrypt_file(file_path, key)
            os.remove(file_path) # Delete original encrypted file
            os.rename(decrypted_file_path, file_path) # Rename decrypted file to original filename

directory_path = os.getcwd() # Getting the current working directory
process_files_in_directory(directory_path, key)